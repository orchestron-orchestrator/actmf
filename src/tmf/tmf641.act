import testing

#class ExternalReference(object):

def get_opt_obj(d: dict[str, ?value], key: str) -> ?dict[str, ?value]:
    v = d.get(key)
    if isinstance(v, dict):
        return v

def get_obj(d: dict[str, ?value], key: str) -> dict[str, ?value]:
    v = d.get(key)
    if isinstance(v, dict):
        return v
    raise ValueError("Expected object for key " + key)

def get_opt_int(d: dict[str, ?value], key: str) -> ?int:
    v = d.get(key)
    if isinstance(v, int):
        return v

def get_opt_str(d: dict[str, ?value], key: str) -> ?str:
    v = d.get(key)
    if isinstance(v, str):
        return v

def get_str(d: dict[str, ?value], key: str) -> str:
    v = d.get(key)
    if isinstance(v, str):
        return v
    raise ValueError("Expected string for key " + key)


class ServiceOrder(object):
    id: ?str
    cancellationDate: ?str
    cancellationReason: ?str
    category: ?str
    description: ?str
    externalId: ?str
    notificationContact: ?str
    priority: ?str
    requestedCompletionDate: ?str
    requestedStartDate: ?str
    #externalReference: list[ExternalReference]
    #note: list[Note]
    #orderRelationship: list[ServiceOrderRelationship]
    #relatedParty: list[RelatedParty]
    # TODO: FIXME
    #serviceOrderItem: list[ServiceOrderItem]
    baseType: ?str
    schemaLocation: ?str
    type: ?str

    def __init__(self, id: ?str, cancellationDate: ?str, cancellationReason: ?str, category: ?str, description: ?str, externalId: ?str, notificationContact: ?str, priority: ?str, requestedCompletionDate: ?str, requestedStartDate: ?str, serviceOrderItem: list[ServiceOrderItem], baseType: ?str, schemaLocation: ?str, type: ?str):
        self.id = id
        self.cancellationDate = cancellationDate
        self.cancellationReason = cancellationReason
        self.category = category
        self.description = description
        self.externalId = externalId
        self.notificationContact = notificationContact
        self.priority = priority
        self.requestedCompletionDate = requestedCompletionDate
        self.requestedStartDate = requestedStartDate
        self.serviceOrderItem = serviceOrderItem
        self.baseType = baseType
        self.schemaLocation = schemaLocation
        self.type = type

    @staticmethod
    def from_json(json: dict[str, ?value]) -> ServiceOrder:
        service_order_items = []
        soi = json.get("serviceOrderItem")
        if isinstance(soi, list):
            for item in soi:
                service_order_items.append(ServiceOrderItem.from_json(item))

        return ServiceOrder(
            get_opt_str(json, "id"),
            get_opt_str(json, "cancellationDate"),
            get_opt_str(json, "cancellationReason"),
            get_opt_str(json, "category"),
            get_opt_str(json, "description"),
            get_opt_str(json, "externalId"),
            get_opt_str(json, "notificationContact"),
            get_opt_str(json, "priority"),
            get_opt_str(json, "requestedCompletionDate"),
            get_opt_str(json, "requestedStartDate"),
            service_order_items,
            get_opt_str(json, "@baseType"),
            get_opt_str(json, "@schemaLocation"),
            get_opt_str(json, "@type")
        )

    def to_json(self) -> dict[str, ?value]:
        service_order_items_json = []
        for soi in self.serviceOrderItem:
            service_order_items_json.append(soi.to_json())

        return {
            "id": self.id,
            "cancellationDate": self.cancellationDate,
            "cancellationReason": self.cancellationReason,
            "category": self.category,
            "description": self.description,
            "externalId": self.externalId,
            "notificationContact": self.notificationContact,
            "priority": self.priority,
            "requestedCompletionDate": self.requestedCompletionDate,
            "requestedStartDate": self.requestedStartDate,
            "serviceOrderItem": service_order_items_json,
            "@baseType": self.baseType,
            "@schemaLocation": self.schemaLocation,
            "@type": self.type
        }

class ServiceOrderItem(object):
    def __init__(self, id: str, action_: str, service: Service, quantity: ?int, state: ?str):
        self.id = id
        self.action_ = action_
        self.service = service
        self.quantity = quantity
        self.state = state

    def __str__(self):
        return "ServiceOrderItem({self.description}, {self.category}, {self.externalId}, {self.priority}, {self.requestedStartDate}, {self.requestedCompletionDate}, {self.state})"

    def __repr__(self):
        return self.__str__()

    @staticmethod
    def from_json(json: dict[str, ?value]) -> ServiceOrderItem:
        return ServiceOrderItem(
            get_str(json, "id"),
            get_str(json, "action"),
            Service.from_json(get_obj(json, "service")),
            get_opt_int(json, "quantity"),
            get_opt_str(json, "state")
        )

    def to_json(self) -> dict[str, ?value]:
        return {
            "id": self.id,
            "action": self.action_,
            "service": self.service.to_json(),
            "quantity": self.quantity,
            "state": self.state
        }

class Service(object):
    def __init__(self, id: ?str, state: ?str, serviceType: ?str, serviceCharacteristic: list[ServiceCharacteristic], serviceSpecification: ?ServiceSpecificationRef, type: ?str):
        self.id = id
        self.state = state
        self.serviceType = serviceType
        self.serviceCharacteristic = serviceCharacteristic
        self.serviceSpecification = serviceSpecification
        self.type = type

    @staticmethod
    def from_json(json: dict[str, ?value]) -> Service:
        characteristics = []
        sc = json.get("serviceCharacteristic")
        if isinstance(sc, list):
            for item in sc:
                characteristics.append(ServiceCharacteristic.from_json(item))

        return Service(
            get_opt_str(json, "id"),
            get_opt_str(json, "state"),
            get_opt_str(json, "serviceType"),
            characteristics,
            ServiceSpecificationRef.from_json(get_opt_obj(json, "serviceSpecification")),
            get_opt_str(json, "@type")
        )

    def to_json(self) -> dict[str, ?value]:
        serviceCharacteristic_json = []
        for sc in self.serviceCharacteristic:
            serviceCharacteristic_json.append(sc.to_json())

        serviceSpec_json = None
        self_serviceSpec = self.serviceSpecification
        if self_serviceSpec is not None:
            serviceSpec_json = self_serviceSpec.to_json()

        return {
            "id": self.id,
            "state": self.state,
            "serviceType": self.serviceType,
            "serviceCharacteristic": serviceCharacteristic_json,
            "serviceSpecification": serviceSpec_json,
            "@type": self.type
        }

class ServiceCharacteristic(object):
    def __init__(self, id: ?str, name: ?str, valueType: ?str, value: dict[str, ?value]):
        self.id = id
        self.name = name
        self.valueType = valueType
        self.value = value

    @staticmethod
    def from_json(json: dict[str, ?value]) -> ServiceCharacteristic:
        return ServiceCharacteristic(
            get_opt_str(json, "id"),
            get_opt_str(json, "name"),
            get_opt_str(json, "valueType"),
            get_obj(json, "value")
        )

    def to_json(self) -> dict[str, ?value]:
        return {
            "id": self.id,
            "name": self.name,
            "valueType": self.valueType,
            "value": self.value
        }

class ServiceSpecificationRef(object):
    def __init__(self, id: ?str, href: ?str, name: ?str, version: ?str, type: ?str):
        self.id = id
        self.href = href
        self.name = name
        self.version = version
        self.type = type

    @staticmethod
    def from_json(json_in: ?dict[str, ?value]) -> ?ServiceSpecificationRef:
        if json_in is not None:
            return ServiceSpecificationRef(
                get_opt_str(json_in, "id"),
                get_opt_str(json_in, "href"),
                get_opt_str(json_in, "name"),
                get_opt_str(json_in, "version"),
                get_opt_str(json_in, "@type")
            )

    def to_json(self) -> dict[str, ?value]:
        return {
            "id": self.id,
            "href": self.href,
            "name": self.name,
            "version": self.version,
            "@type": self.type
        }

class ServiceOrderServiceCharacteristic(object):
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def __str__(self):
        return "ServiceOrderServiceCharacteristic({self.name}, {self.value})"

    def __repr__(self):
        return self.__str__()

def _test_add():
    so_in = {
        "externalId": "BSS748",
        "priority": "1",
        "description": "Service order description",
        "category": "TMF resource illustration",
        "requestedStartDate": "2018-01-15T09:37:40.508Z",
        "requestedCompletionDate": "2018-01-15T09:37:40.508Z",
        "@type": "ServiceOrder",
        "serviceOrderItem": [
            {
                "id": "1",
                "action": "add",
                "state": "acknowledged",
                "service": {
                    "id": "some-service-id-1234",
                    "@type": "Service",
                    "state": "active",
                    "serviceType": "CFS",
                    "serviceCharacteristic": [
                        {
                            "name": "vCPE",
                            "valueType": "object",
                            "value": {
                                "@type": "JSONSpecification",
                                "@schemaLocation": "http://nbi/api/v4/serviceSpecification/ONAPvCPE_Spec/specificationInputSchema",
                                "vCPE_IP": "193.218.236.21",
                                "MaxTxRate": 300,
                                "TransmitPower": "11 dBm",
                                "maxTream": "OFF"
                            }
                        }
                    ],
                    "serviceSpecification": {
                        "id": "ONAPvCPE_Spec",
                        "href": "http://...:serviceSpecification/ONAPvCPE_Spec",
                        "name": "vCPE",
                        "version": "1",
                        "@type": "vCPE"
                    }
                }
            }
        ]
    }
    so = ServiceOrder.from_json(so_in)
    testing.assertEqual(so.externalId, "BSS748")
    testing.assertEqual(so.priority, "1")
    testing.assertEqual(so.description, "Service order description")
    testing.assertEqual(so.category, "TMF resource illustration")
    testing.assertEqual(so.requestedStartDate, "2018-01-15T09:37:40.508Z")
    testing.assertEqual(so.requestedCompletionDate, "2018-01-15T09:37:40.508Z")
    testing.assertEqual(so.type, "ServiceOrder")
    testing.assertEqual(len(so.serviceOrderItem), 1)
    soi0 = so.serviceOrderItem[0]
    testing.assertEqual(soi0.id, "1")
    testing.assertEqual(soi0.action_, "add")
    testing.assertEqual(soi0.state, "acknowledged")
    soi0s = soi0.service
    testing.assertEqual(soi0s.type, "Service")
    testing.assertEqual(soi0s.id, "some-service-id-1234")
    testing.assertEqual(soi0s.state, "active")
    testing.assertEqual(soi0s.serviceType, "CFS")
    testing.assertEqual(len(soi0s.serviceCharacteristic), 1)
    sc = soi0s.serviceCharacteristic[0]
    testing.assertEqual(sc.name, "vCPE")
    testing.assertEqual(sc.valueType, "object")
    # YANG decode the inner part
